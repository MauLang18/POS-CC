// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using POS.Infrastructure.Persistence.Contexts;

#nullable disable

namespace POS.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241125204457_DeleteFile")]
    partial class DeleteFile
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("POS.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("CategoryId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AuditCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AuditCreateUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditDeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditDeleteUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditUpdateUser")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("POS.Domain.Entities.CreditType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("CreditTypeId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AuditCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AuditCreateUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditDeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditDeleteUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditUpdateUser")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("CreditTypes");
                });

            modelBuilder.Entity("POS.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("CustomerId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<DateTime>("AuditCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AuditCreateUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditDeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditDeleteUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditUpdateUser")
                        .HasColumnType("integer");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("CreditInterestRate")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal>("CreditLimit")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)");

                    b.Property<int>("CreditTypeId")
                        .HasColumnType("integer");

                    b.Property<decimal>("DiscountPercent")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("character varying(25)");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreditTypeId");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("POS.Domain.Entities.DocumentTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("DocumentTemplateId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AuditCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AuditCreateUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditDeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditDeleteUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditUpdateUser")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("TemplateTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TemplateTypeId");

                    b.ToTable("DocumentTemplates");
                });

            modelBuilder.Entity("POS.Domain.Entities.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("DocumentTypeId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("character varying(7)");

                    b.Property<DateTime>("AuditCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AuditCreateUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditDeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditDeleteUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditUpdateUser")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("POS.Domain.Entities.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("EmailTemplateId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AuditCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AuditCreateUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditDeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditDeleteUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditUpdateUser")
                        .HasColumnType("integer");

                    b.Property<string>("Body")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("TemplateTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TemplateTypeId");

                    b.ToTable("EmailTemplates");
                });

            modelBuilder.Entity("POS.Domain.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("InvoceId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AuditCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AuditCreateUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditDeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditDeleteUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditUpdateUser")
                        .HasColumnType("integer");

                    b.Property<int>("InstallmentsCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("integer");

                    b.Property<int>("SaleId")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Total")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("VoucherNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)");

                    b.Property<int>("VoucherTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("SaleId");

                    b.HasIndex("StatusId");

                    b.HasIndex("VoucherTypeId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("POS.Domain.Entities.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("LicenseId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AuditCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AuditCreateUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditDeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditDeleteUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditUpdateUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LicenseKey")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int>("LicenseTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LicenseTypeId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Licenses");
                });

            modelBuilder.Entity("POS.Domain.Entities.LicenseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("LicenseTypeId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AuditCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AuditCreateUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditDeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditDeleteUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditUpdateUser")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("LicenseTypes");
                });

            modelBuilder.Entity("POS.Domain.Entities.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("PaymentMethodId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AuditCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AuditCreateUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditDeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditDeleteUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditUpdateUser")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("POS.Domain.Entities.ProductService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ProductServiceId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AuditCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AuditCreateUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditDeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditDeleteUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditUpdateUser")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int>("IsService")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("integer");

                    b.Property<int>("UnitId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UnitId");

                    b.ToTable("ProductServices");
                });

            modelBuilder.Entity("POS.Domain.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ProjectId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AuditCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AuditCreateUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditDeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditDeleteUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditUpdateUser")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("CommercialName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InternalName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StatusId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("POS.Domain.Entities.ProjectDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ProjectDetailId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("Requirement")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StatusId");

                    b.ToTable("ProjectDetails");
                });

            modelBuilder.Entity("POS.Domain.Entities.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("PurchaseId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplyIVA")
                        .HasColumnType("integer");

                    b.Property<DateTime>("AuditCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AuditCreateUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditDeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditDeleteUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditUpdateUser")
                        .HasColumnType("integer");

                    b.Property<decimal>("IVA")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("Observation")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<decimal>("SubTotal")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Total")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("POS.Domain.Entities.PurchaseDetail", b =>
                {
                    b.Property<int>("PurchaseId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductServiceId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("Total")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.HasKey("PurchaseId", "ProductServiceId");

                    b.HasIndex("ProductServiceId");

                    b.ToTable("PurchaseDetails");
                });

            modelBuilder.Entity("POS.Domain.Entities.Quote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("QuoteId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplyIVA")
                        .HasColumnType("integer");

                    b.Property<DateTime>("AuditCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AuditCreateUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditDeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditDeleteUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditUpdateUser")
                        .HasColumnType("integer");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Discount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal>("IVA")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("Observation")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<decimal>("SubTotal")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal>("Total")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("VoucherNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("VoucherTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("StatusId");

                    b.HasIndex("VoucherTypeId");

                    b.ToTable("Quotes");
                });

            modelBuilder.Entity("POS.Domain.Entities.QuoteDetail", b =>
                {
                    b.Property<int>("QuoteId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductServiceId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("Total")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.HasKey("QuoteId", "ProductServiceId");

                    b.HasIndex("ProductServiceId");

                    b.ToTable("QuoteDetails");
                });

            modelBuilder.Entity("POS.Domain.Entities.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SaleId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplyIVA")
                        .HasColumnType("integer");

                    b.Property<DateTime>("AuditCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AuditCreateUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditDeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditDeleteUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditUpdateUser")
                        .HasColumnType("integer");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<decimal>("IVA")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("Observation")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int?>("QuoteId")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<decimal>("SubTotal")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal>("Total")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("VoucherNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("VoucherTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("QuoteId");

                    b.HasIndex("StatusId");

                    b.HasIndex("VoucherTypeId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("POS.Domain.Entities.SaleDetail", b =>
                {
                    b.Property<int>("SaleId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductServiceId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("Total")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.HasKey("SaleId", "ProductServiceId");

                    b.HasIndex("ProductServiceId");

                    b.ToTable("SaleDetails");
                });

            modelBuilder.Entity("POS.Domain.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("StatusId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AuditCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AuditCreateUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditDeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditDeleteUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditUpdateUser")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("POS.Domain.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SupplierId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<DateTime>("AuditCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AuditCreateUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditDeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditDeleteUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditUpdateUser")
                        .HasColumnType("integer");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("character varying(25)");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("POS.Domain.Entities.TemplateType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("TemplateTypeId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AuditCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AuditCreateUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditDeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditDeleteUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditUpdateUser")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TemplateTypes");
                });

            modelBuilder.Entity("POS.Domain.Entities.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("UnitId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("character varying(7)");

                    b.Property<DateTime>("AuditCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AuditCreateUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditDeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditDeleteUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditUpdateUser")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("POS.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("UserId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AuditCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AuditCreateUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditDeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditDeleteUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditUpdateUser")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("POS.Domain.Entities.VoucherType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("VoucherTypeId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("character varying(7)");

                    b.Property<DateTime>("AuditCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AuditCreateUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditDeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditDeleteUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditUpdateUser")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("VoucherTypes");
                });

            modelBuilder.Entity("POS.Domain.Entities.Customer", b =>
                {
                    b.HasOne("POS.Domain.Entities.CreditType", "CreditType")
                        .WithMany("Customers")
                        .HasForeignKey("CreditTypeId")
                        .IsRequired();

                    b.HasOne("POS.Domain.Entities.DocumentType", "DocumentType")
                        .WithMany("Customers")
                        .HasForeignKey("DocumentTypeId")
                        .IsRequired();

                    b.Navigation("CreditType");

                    b.Navigation("DocumentType");
                });

            modelBuilder.Entity("POS.Domain.Entities.DocumentTemplate", b =>
                {
                    b.HasOne("POS.Domain.Entities.TemplateType", "TemplateType")
                        .WithMany("DocumentTemplates")
                        .HasForeignKey("TemplateTypeId")
                        .IsRequired();

                    b.Navigation("TemplateType");
                });

            modelBuilder.Entity("POS.Domain.Entities.EmailTemplate", b =>
                {
                    b.HasOne("POS.Domain.Entities.TemplateType", "TemplateType")
                        .WithMany("EmailTemplates")
                        .HasForeignKey("TemplateTypeId")
                        .IsRequired();

                    b.Navigation("TemplateType");
                });

            modelBuilder.Entity("POS.Domain.Entities.Invoice", b =>
                {
                    b.HasOne("POS.Domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("Invoices")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("POS.Domain.Entities.Sale", "Sale")
                        .WithMany("Invoices")
                        .HasForeignKey("SaleId")
                        .IsRequired();

                    b.HasOne("POS.Domain.Entities.Status", "Status")
                        .WithMany("Invoices")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("POS.Domain.Entities.VoucherType", "VoucherType")
                        .WithMany("Invoices")
                        .HasForeignKey("VoucherTypeId")
                        .IsRequired();

                    b.Navigation("PaymentMethod");

                    b.Navigation("Sale");

                    b.Navigation("Status");

                    b.Navigation("VoucherType");
                });

            modelBuilder.Entity("POS.Domain.Entities.License", b =>
                {
                    b.HasOne("POS.Domain.Entities.LicenseType", "LicenseType")
                        .WithMany("Licenses")
                        .HasForeignKey("LicenseTypeId")
                        .IsRequired();

                    b.HasOne("POS.Domain.Entities.Project", "Project")
                        .WithMany("Licenses")
                        .HasForeignKey("ProjectId")
                        .IsRequired();

                    b.Navigation("LicenseType");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("POS.Domain.Entities.ProductService", b =>
                {
                    b.HasOne("POS.Domain.Entities.Category", "Category")
                        .WithMany("ProductServices")
                        .HasForeignKey("CategoryId")
                        .IsRequired();

                    b.HasOne("POS.Domain.Entities.Unit", "Unit")
                        .WithMany("ProductServices")
                        .HasForeignKey("UnitId")
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("POS.Domain.Entities.Project", b =>
                {
                    b.HasOne("POS.Domain.Entities.Category", "Category")
                        .WithMany("Projects")
                        .HasForeignKey("CategoryId")
                        .IsRequired();

                    b.HasOne("POS.Domain.Entities.Customer", "Customer")
                        .WithMany("Projects")
                        .HasForeignKey("CustomerId")
                        .IsRequired();

                    b.HasOne("POS.Domain.Entities.Status", "Status")
                        .WithMany("Projects")
                        .HasForeignKey("StatusId")
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Customer");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("POS.Domain.Entities.ProjectDetail", b =>
                {
                    b.HasOne("POS.Domain.Entities.Project", "Project")
                        .WithMany("ProjectDetails")
                        .HasForeignKey("ProjectId")
                        .IsRequired();

                    b.HasOne("POS.Domain.Entities.Status", "Status")
                        .WithMany("ProjectDetails")
                        .HasForeignKey("StatusId")
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("POS.Domain.Entities.Purchase", b =>
                {
                    b.HasOne("POS.Domain.Entities.Supplier", "Supplier")
                        .WithMany("Purchases")
                        .HasForeignKey("SupplierId")
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("POS.Domain.Entities.PurchaseDetail", b =>
                {
                    b.HasOne("POS.Domain.Entities.ProductService", "ProductService")
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("ProductServiceId")
                        .IsRequired();

                    b.HasOne("POS.Domain.Entities.Purchase", "Purchase")
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("PurchaseId")
                        .IsRequired();

                    b.Navigation("ProductService");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("POS.Domain.Entities.Quote", b =>
                {
                    b.HasOne("POS.Domain.Entities.Customer", "Customer")
                        .WithMany("Quotes")
                        .HasForeignKey("CustomerId")
                        .IsRequired();

                    b.HasOne("POS.Domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("Quotes")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("POS.Domain.Entities.Status", "Status")
                        .WithMany("Quotes")
                        .HasForeignKey("StatusId")
                        .IsRequired();

                    b.HasOne("POS.Domain.Entities.VoucherType", "VoucherType")
                        .WithMany("Quotes")
                        .HasForeignKey("VoucherTypeId")
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Status");

                    b.Navigation("VoucherType");
                });

            modelBuilder.Entity("POS.Domain.Entities.QuoteDetail", b =>
                {
                    b.HasOne("POS.Domain.Entities.ProductService", "ProductService")
                        .WithMany("QuoteDetails")
                        .HasForeignKey("ProductServiceId")
                        .IsRequired();

                    b.HasOne("POS.Domain.Entities.Quote", "Quote")
                        .WithMany("QuoteDetails")
                        .HasForeignKey("QuoteId")
                        .IsRequired();

                    b.Navigation("ProductService");

                    b.Navigation("Quote");
                });

            modelBuilder.Entity("POS.Domain.Entities.Sale", b =>
                {
                    b.HasOne("POS.Domain.Entities.Customer", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("CustomerId")
                        .IsRequired();

                    b.HasOne("POS.Domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("Sales")
                        .HasForeignKey("PaymentMethodId");

                    b.HasOne("POS.Domain.Entities.Project", "Project")
                        .WithMany("Sales")
                        .HasForeignKey("ProjectId");

                    b.HasOne("POS.Domain.Entities.Quote", "Quote")
                        .WithMany("Sales")
                        .HasForeignKey("QuoteId");

                    b.HasOne("POS.Domain.Entities.Status", "Status")
                        .WithMany("Sales")
                        .HasForeignKey("StatusId")
                        .IsRequired();

                    b.HasOne("POS.Domain.Entities.VoucherType", "VoucherType")
                        .WithMany("Sales")
                        .HasForeignKey("VoucherTypeId")
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Project");

                    b.Navigation("Quote");

                    b.Navigation("Status");

                    b.Navigation("VoucherType");
                });

            modelBuilder.Entity("POS.Domain.Entities.SaleDetail", b =>
                {
                    b.HasOne("POS.Domain.Entities.ProductService", "ProductService")
                        .WithMany("SaleDetails")
                        .HasForeignKey("ProductServiceId")
                        .IsRequired();

                    b.HasOne("POS.Domain.Entities.Sale", "Sale")
                        .WithMany("SaleDetails")
                        .HasForeignKey("SaleId")
                        .IsRequired();

                    b.Navigation("ProductService");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("POS.Domain.Entities.Supplier", b =>
                {
                    b.HasOne("POS.Domain.Entities.DocumentType", "DocumentType")
                        .WithMany("Suppliers")
                        .HasForeignKey("DocumentTypeId")
                        .IsRequired();

                    b.Navigation("DocumentType");
                });

            modelBuilder.Entity("POS.Domain.Entities.Category", b =>
                {
                    b.Navigation("ProductServices");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("POS.Domain.Entities.CreditType", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("POS.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("Quotes");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("POS.Domain.Entities.DocumentType", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("POS.Domain.Entities.LicenseType", b =>
                {
                    b.Navigation("Licenses");
                });

            modelBuilder.Entity("POS.Domain.Entities.PaymentMethod", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Quotes");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("POS.Domain.Entities.ProductService", b =>
                {
                    b.Navigation("PurchaseDetails");

                    b.Navigation("QuoteDetails");

                    b.Navigation("SaleDetails");
                });

            modelBuilder.Entity("POS.Domain.Entities.Project", b =>
                {
                    b.Navigation("Licenses");

                    b.Navigation("ProjectDetails");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("POS.Domain.Entities.Purchase", b =>
                {
                    b.Navigation("PurchaseDetails");
                });

            modelBuilder.Entity("POS.Domain.Entities.Quote", b =>
                {
                    b.Navigation("QuoteDetails");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("POS.Domain.Entities.Sale", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("SaleDetails");
                });

            modelBuilder.Entity("POS.Domain.Entities.Status", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("ProjectDetails");

                    b.Navigation("Projects");

                    b.Navigation("Quotes");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("POS.Domain.Entities.Supplier", b =>
                {
                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("POS.Domain.Entities.TemplateType", b =>
                {
                    b.Navigation("DocumentTemplates");

                    b.Navigation("EmailTemplates");
                });

            modelBuilder.Entity("POS.Domain.Entities.Unit", b =>
                {
                    b.Navigation("ProductServices");
                });

            modelBuilder.Entity("POS.Domain.Entities.VoucherType", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Quotes");

                    b.Navigation("Sales");
                });
#pragma warning restore 612, 618
        }
    }
}
